PROJECT := enduro
MAKEDIR := hack/make
SHELL   := /bin/bash

.DEFAULT_GOAL := help
.PHONY: *

DBG_MAKEFILE ?=
ifeq ($(DBG_MAKEFILE),1)
    $(warning ***** starting Makefile for goal(s) "$(MAKECMDGOALS)")
    $(warning ***** $(shell date))
else
    # If we're not debugging the Makefile, don't echo recipes.
    MAKEFLAGS += -s
endif

define NEWLINE


endef

IGNORED_PACKAGES := \
	github.com/artefactual-labs/enduro/hack/% \
	github.com/artefactual-labs/enduro/%/fake \
	github.com/artefactual-labs/enduro/ui \
	github.com/artefactual-labs/enduro/internal/api/design \
	github.com/artefactual-labs/enduro/internal/api/gen/% \
	github.com/artefactual-labs/enduro/internal/batch/fake \
	github.com/artefactual-labs/enduro/internal/collection/fake \
	github.com/artefactual-labs/enduro/internal/pipeline/fake \
	github.com/artefactual-labs/enduro/internal/watcher/fake
PACKAGES := $(shell go list ./...)
TEST_PACKAGES := $(filter-out $(IGNORED_PACKAGES),$(PACKAGES))
TEST_IGNORED_PACKAGES := $(filter $(IGNORED_PACKAGES),$(PACKAGES))

# Configure bine.
export PATH := $(shell go tool bine path):$(PATH)
tool-%:
	@go tool bine get $* 1> /dev/null

run: # @HELP Builds and run the enduro binary.
run: build
	./build/enduro

build: # @HELP Builds the enduro binary.
build: GO         ?= $(shell which go)
build: BUILD_TIME ?= $(shell date -u +%Y-%m-%dT%T%z)
build: GIT_COMMIT ?= $(shell git rev-parse --short HEAD)
build: LD_FLAGS   ?= '-X "main.buildTime=$(BUILD_TIME)" -X main.gitCommit=$(GIT_COMMIT)'
build: GO_FLAGS   ?= -ldflags=$(LD_FLAGS)
build:
	mkdir -p ./build
	$(GO) build -trimpath -o build/enduro $(GO_FLAGS) -v

deps: tool-go-mod-outdated # @HELP Lists available module dependency updates.
	go list -u -m -json all | go-mod-outdated -update -direct

test: # @HELP Run all tests and output a summary using gotestsum.
test: TFORMAT ?= testdox
test: GOTESTSUM_FLAGS ?=
test: GOTEST_FLAGS ?=
test: COMBINED_FLAGS ?= $(GOTEST_FLAGS) $(TEST_PACKAGES)
test: tool-gotestsum
	gotestsum --format=$(TFORMAT) $(GOTESTSUM_FLAGS) -- $(COMBINED_FLAGS)

test-race: # @HELP Run all tests with the race detector.
test-race:
	$(MAKE) test GOTEST_FLAGS="-race"

test-ci: # @HELP Run all tests in CI with coverage and the race detector.
test-ci:
	$(MAKE) test GOTESTSUM_FLAGS="--junitfile=junit.xml" GOTEST_FLAGS="-race -coverprofile=covreport -covermode=atomic"

list-tested-packages: # @HELP Print a list of packages being tested.
list-tested-packages:
	$(foreach PACKAGE,$(TEST_PACKAGES),@echo $(PACKAGE)$(NEWLINE))

list-ignored-packages: # @HELP Print a list of packages ignored in testing.
list-ignored-packages:
	$(foreach PACKAGE,$(TEST_IGNORED_PACKAGES),@echo $(PACKAGE)$(NEWLINE))

fmt: # @HELP Formats the code using golangci-lint.
fmt: tool-golangci-lint
	golangci-lint fmt -v

lint: # @HELP Lints the code using golangci-lint.
lint: tool-golangci-lint
	golangci-lint run -v --fix

gen-goa: # @HELP Generates Goa assets.
gen-goa: tool-goa
	goa gen github.com/artefactual-labs/enduro/internal/api/design -o internal/api
	@$(MAKE) gen-goa-json-pretty

gen-goa-json-pretty: goa_http_dir = "internal/api/gen/http"
gen-goa-json-pretty: json_files = $(shell find $(goa_http_dir) -type f -name "*.json" | sort -u)
gen-goa-json-pretty: tool-jq
	@for f in $(json_files); \
		do (cat "$$f" | jq -S '.' >> "$$f".sorted && mv "$$f".sorted "$$f") \
			&& echo "Formatting $$f with jq" || exit 1; \
	done

clean: # @HELP Cleans temporary files.
clean:
	rm -rf ./build ./dist

release-build: # @HELP Generate the release build with GoReleaser.
release-build: tool-goreleaser
	goreleaser build --clean --auto-snapshot

website: # @HELP Serves the website for development.
website: tool-hugo
	hugo serve --source=website/

ui: # @HELP Builds the UI.
ui:
	npm --prefix=ui install
	npm --prefix=ui run build

ui-dev:
ui-dev: # @HELP Serves the UI for development.
	npm --prefix=ui run dev

ui-client: # @HELP Generates the UI client using openapi-generator-cli.
ui-client:
	rm -rf $(CURDIR)/ui/src/client
	docker container run --rm --user $(shell id -u):$(shell id -g) --volume $(CURDIR):/local openapitools/openapi-generator-cli:v6.6.0 \
		generate \
			--input-spec /local/internal/api/gen/http/openapi3.json \
			--generator-name typescript-fetch \
			--output /local/ui/src/openapi-generator/ \
			-p "generateAliasAsModel=false" \
			-p "withInterfaces=true" \
			-p "supportsES6=true"
	echo "@@@@ Please, review all warnings generated by openapi-generator-cli above!"

db: # @HELP Opens the MySQL CLI.
db:
	docker compose exec --user=root mysql mysql -hlocalhost -uroot -proot123

flush: # @HELP Flushes the enduro database.
flush:
	docker compose exec --user=root mysql mysql -hlocalhost -uroot -proot123 -e "drop database enduro"
	docker compose exec --user=root mysql mysql -hlocalhost -uroot -proot123 -e "create database enduro"

gen-mock: # @HELP Generates mocks with mockgen.
gen-mock: tool-mockgen
	mockgen -typed -destination=./internal/batch/fake/mock_batch.go -package=fake github.com/artefactual-labs/enduro/internal/batch Service
	mockgen -typed -destination=./internal/collection/fake/mock_collection.go -package=fake github.com/artefactual-labs/enduro/internal/collection Service
	mockgen -typed -destination=./internal/pipeline/fake/mock_pipeline.go -package=fake github.com/artefactual-labs/enduro/internal/pipeline Service
	mockgen -typed -destination=./internal/watcher/fake/mock_watcher.go -package=fake github.com/artefactual-labs/enduro/internal/watcher Service
	mockgen -typed -destination=./internal/watcher/fake/mock_watcher_unit.go -package=fake github.com/artefactual-labs/enduro/internal/watcher Watcher

temporal: # @HELP Runs a development instance of Temporal.
temporal: PORT := 55555
temporal: LOG_LEVEL := warn
temporal: tool-temporal-cli
	temporal-cli server start-dev --namespace=default --port=$(PORT) --headless --log-format=pretty --log-level=$(LOG_LEVEL)

help: # @HELP Prints this message.
	echo "TARGETS:"
	grep -E '^.*: *# *@HELP' Makefile             \
	    | awk '                                   \
	        BEGIN {FS = ": *# *@HELP"};           \
	        { printf "  %-30s %s\n", $$1, $$2 };  \
	    '
