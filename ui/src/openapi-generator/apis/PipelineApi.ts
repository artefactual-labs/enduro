/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EnduroStoredPipeline,
  PipelineNotFound,
} from '../models';
import {
    EnduroStoredPipelineFromJSON,
    EnduroStoredPipelineToJSON,
    PipelineNotFoundFromJSON,
    PipelineNotFoundToJSON,
} from '../models';

export interface PipelineListRequest {
    name?: string;
    status?: boolean;
}

export interface PipelineProcessingRequest {
    id: string;
}

export interface PipelineShowRequest {
    id: string;
}

/**
 * PipelineApi - interface
 * 
 * @export
 * @interface PipelineApiInterface
 */
export interface PipelineApiInterface {
    /**
     * List all known pipelines
     * @summary list pipeline
     * @param {string} [name] 
     * @param {boolean} [status] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiInterface
     */
    pipelineListRaw(requestParameters: PipelineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EnduroStoredPipeline>>>;

    /**
     * List all known pipelines
     * list pipeline
     */
    pipelineList(requestParameters: PipelineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EnduroStoredPipeline>>;

    /**
     * List all processing configurations of a pipeline given its ID
     * @summary processing pipeline
     * @param {string} id Identifier of pipeline
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiInterface
     */
    pipelineProcessingRaw(requestParameters: PipelineProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * List all processing configurations of a pipeline given its ID
     * processing pipeline
     */
    pipelineProcessing(requestParameters: PipelineProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Show pipeline by ID
     * @summary show pipeline
     * @param {string} id Identifier of pipeline to show
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PipelineApiInterface
     */
    pipelineShowRaw(requestParameters: PipelineShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnduroStoredPipeline>>;

    /**
     * Show pipeline by ID
     * show pipeline
     */
    pipelineShow(requestParameters: PipelineShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnduroStoredPipeline>;

}

/**
 * 
 */
export class PipelineApi extends runtime.BaseAPI implements PipelineApiInterface {

    /**
     * List all known pipelines
     * list pipeline
     */
    async pipelineListRaw(requestParameters: PipelineListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EnduroStoredPipeline>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipeline`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EnduroStoredPipelineFromJSON));
    }

    /**
     * List all known pipelines
     * list pipeline
     */
    async pipelineList(requestParameters: PipelineListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EnduroStoredPipeline>> {
        const response = await this.pipelineListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all processing configurations of a pipeline given its ID
     * processing pipeline
     */
    async pipelineProcessingRaw(requestParameters: PipelineProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pipelineProcessing.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipeline/{id}/processing`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all processing configurations of a pipeline given its ID
     * processing pipeline
     */
    async pipelineProcessing(requestParameters: PipelineProcessingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.pipelineProcessingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Show pipeline by ID
     * show pipeline
     */
    async pipelineShowRaw(requestParameters: PipelineShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EnduroStoredPipeline>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling pipelineShow.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipeline/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EnduroStoredPipelineFromJSON(jsonValue));
    }

    /**
     * Show pipeline by ID
     * show pipeline
     */
    async pipelineShow(requestParameters: PipelineShowRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EnduroStoredPipeline> {
        const response = await this.pipelineShowRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
