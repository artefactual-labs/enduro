/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SubmitRequestBody
 */
export interface SubmitRequestBody {
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestBody
     */
    completedDir?: string;
    /**
     * 
     * @type {number}
     * @memberof SubmitRequestBody
     */
    depth?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SubmitRequestBody
     */
    excludeHiddenFiles?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestBody
     */
    path: string;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestBody
     */
    pipeline?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubmitRequestBody
     */
    processNameMetadata?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestBody
     */
    processingConfig?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SubmitRequestBody
     */
    rejectDuplicates?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestBody
     */
    retentionPeriod?: string;
    /**
     * 
     * @type {string}
     * @memberof SubmitRequestBody
     */
    transferType?: string;
}

/**
 * Check if a given object implements the SubmitRequestBody interface.
 */
export function instanceOfSubmitRequestBody(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "path" in value;

    return isInstance;
}

export function SubmitRequestBodyFromJSON(json: any): SubmitRequestBody {
    return SubmitRequestBodyFromJSONTyped(json, false);
}

export function SubmitRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubmitRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'completedDir': !exists(json, 'completed_dir') ? undefined : json['completed_dir'],
        'depth': !exists(json, 'depth') ? undefined : json['depth'],
        'excludeHiddenFiles': !exists(json, 'exclude_hidden_files') ? undefined : json['exclude_hidden_files'],
        'path': json['path'],
        'pipeline': !exists(json, 'pipeline') ? undefined : json['pipeline'],
        'processNameMetadata': !exists(json, 'process_name_metadata') ? undefined : json['process_name_metadata'],
        'processingConfig': !exists(json, 'processing_config') ? undefined : json['processing_config'],
        'rejectDuplicates': !exists(json, 'reject_duplicates') ? undefined : json['reject_duplicates'],
        'retentionPeriod': !exists(json, 'retention_period') ? undefined : json['retention_period'],
        'transferType': !exists(json, 'transfer_type') ? undefined : json['transfer_type'],
    };
}

export function SubmitRequestBodyToJSON(value?: SubmitRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'completed_dir': value.completedDir,
        'depth': value.depth,
        'exclude_hidden_files': value.excludeHiddenFiles,
        'path': value.path,
        'pipeline': value.pipeline,
        'process_name_metadata': value.processNameMetadata,
        'processing_config': value.processingConfig,
        'reject_duplicates': value.rejectDuplicates,
        'retention_period': value.retentionPeriod,
        'transfer_type': value.transferType,
    };
}

