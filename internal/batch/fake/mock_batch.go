// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-labs/enduro/internal/batch (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/batch/fake/mock_batch.go -package=fake github.com/artefactual-labs/enduro/internal/batch Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	batch "github.com/artefactual-labs/enduro/internal/api/gen/batch"
	collection "github.com/artefactual-labs/enduro/internal/collection"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Hints mocks base method.
func (m *MockService) Hints(arg0 context.Context) (*batch.BatchHintsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hints", arg0)
	ret0, _ := ret[0].(*batch.BatchHintsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hints indicates an expected call of Hints.
func (mr *MockServiceMockRecorder) Hints(arg0 any) *MockServiceHintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hints", reflect.TypeOf((*MockService)(nil).Hints), arg0)
	return &MockServiceHintsCall{Call: call}
}

// MockServiceHintsCall wrap *gomock.Call
type MockServiceHintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceHintsCall) Return(res *batch.BatchHintsResult, err error) *MockServiceHintsCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceHintsCall) Do(f func(context.Context) (*batch.BatchHintsResult, error)) *MockServiceHintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceHintsCall) DoAndReturn(f func(context.Context) (*batch.BatchHintsResult, error)) *MockServiceHintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitProcessingWorkflow mocks base method.
func (m *MockService) InitProcessingWorkflow(ctx context.Context, req *collection.ProcessingWorkflowRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitProcessingWorkflow", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitProcessingWorkflow indicates an expected call of InitProcessingWorkflow.
func (mr *MockServiceMockRecorder) InitProcessingWorkflow(ctx, req any) *MockServiceInitProcessingWorkflowCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitProcessingWorkflow", reflect.TypeOf((*MockService)(nil).InitProcessingWorkflow), ctx, req)
	return &MockServiceInitProcessingWorkflowCall{Call: call}
}

// MockServiceInitProcessingWorkflowCall wrap *gomock.Call
type MockServiceInitProcessingWorkflowCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceInitProcessingWorkflowCall) Return(arg0 error) *MockServiceInitProcessingWorkflowCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceInitProcessingWorkflowCall) Do(f func(context.Context, *collection.ProcessingWorkflowRequest) error) *MockServiceInitProcessingWorkflowCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceInitProcessingWorkflowCall) DoAndReturn(f func(context.Context, *collection.ProcessingWorkflowRequest) error) *MockServiceInitProcessingWorkflowCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockService) Status(arg0 context.Context) (*batch.BatchStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0)
	ret0, _ := ret[0].(*batch.BatchStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockServiceMockRecorder) Status(arg0 any) *MockServiceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockService)(nil).Status), arg0)
	return &MockServiceStatusCall{Call: call}
}

// MockServiceStatusCall wrap *gomock.Call
type MockServiceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceStatusCall) Return(res *batch.BatchStatusResult, err error) *MockServiceStatusCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceStatusCall) Do(f func(context.Context) (*batch.BatchStatusResult, error)) *MockServiceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceStatusCall) DoAndReturn(f func(context.Context) (*batch.BatchStatusResult, error)) *MockServiceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Submit mocks base method.
func (m *MockService) Submit(arg0 context.Context, arg1 *batch.SubmitPayload) (*batch.BatchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Submit", arg0, arg1)
	ret0, _ := ret[0].(*batch.BatchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Submit indicates an expected call of Submit.
func (mr *MockServiceMockRecorder) Submit(arg0, arg1 any) *MockServiceSubmitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Submit", reflect.TypeOf((*MockService)(nil).Submit), arg0, arg1)
	return &MockServiceSubmitCall{Call: call}
}

// MockServiceSubmitCall wrap *gomock.Call
type MockServiceSubmitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSubmitCall) Return(res *batch.BatchResult, err error) *MockServiceSubmitCall {
	c.Call = c.Call.Return(res, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSubmitCall) Do(f func(context.Context, *batch.SubmitPayload) (*batch.BatchResult, error)) *MockServiceSubmitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSubmitCall) DoAndReturn(f func(context.Context, *batch.SubmitPayload) (*batch.BatchResult, error)) *MockServiceSubmitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
