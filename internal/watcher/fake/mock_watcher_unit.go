// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-labs/enduro/internal/watcher (interfaces: Watcher)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	watcher "github.com/artefactual-labs/enduro/internal/watcher"
	gomock "go.uber.org/mock/gomock"
	blob "gocloud.dev/blob"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// CompletedDir mocks base method.
func (m *MockWatcher) CompletedDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompletedDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// CompletedDir indicates an expected call of CompletedDir.
func (mr *MockWatcherMockRecorder) CompletedDir() *WatcherCompletedDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompletedDir", reflect.TypeOf((*MockWatcher)(nil).CompletedDir))
	return &WatcherCompletedDirCall{Call: call}
}

// WatcherCompletedDirCall wrap *gomock.Call
type WatcherCompletedDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherCompletedDirCall) Return(arg0 string) *WatcherCompletedDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherCompletedDirCall) Do(f func() string) *WatcherCompletedDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherCompletedDirCall) DoAndReturn(f func() string) *WatcherCompletedDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExcludeHiddenFiles mocks base method.
func (m *MockWatcher) ExcludeHiddenFiles() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExcludeHiddenFiles")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExcludeHiddenFiles indicates an expected call of ExcludeHiddenFiles.
func (mr *MockWatcherMockRecorder) ExcludeHiddenFiles() *WatcherExcludeHiddenFilesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExcludeHiddenFiles", reflect.TypeOf((*MockWatcher)(nil).ExcludeHiddenFiles))
	return &WatcherExcludeHiddenFilesCall{Call: call}
}

// WatcherExcludeHiddenFilesCall wrap *gomock.Call
type WatcherExcludeHiddenFilesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherExcludeHiddenFilesCall) Return(arg0 bool) *WatcherExcludeHiddenFilesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherExcludeHiddenFilesCall) Do(f func() bool) *WatcherExcludeHiddenFilesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherExcludeHiddenFilesCall) DoAndReturn(f func() bool) *WatcherExcludeHiddenFilesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenBucket mocks base method.
func (m *MockWatcher) OpenBucket(arg0 context.Context) (*blob.Bucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenBucket", arg0)
	ret0, _ := ret[0].(*blob.Bucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenBucket indicates an expected call of OpenBucket.
func (mr *MockWatcherMockRecorder) OpenBucket(arg0 interface{}) *WatcherOpenBucketCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenBucket", reflect.TypeOf((*MockWatcher)(nil).OpenBucket), arg0)
	return &WatcherOpenBucketCall{Call: call}
}

// WatcherOpenBucketCall wrap *gomock.Call
type WatcherOpenBucketCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherOpenBucketCall) Return(arg0 *blob.Bucket, arg1 error) *WatcherOpenBucketCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherOpenBucketCall) Do(f func(context.Context) (*blob.Bucket, error)) *WatcherOpenBucketCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherOpenBucketCall) DoAndReturn(f func(context.Context) (*blob.Bucket, error)) *WatcherOpenBucketCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Path mocks base method.
func (m *MockWatcher) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockWatcherMockRecorder) Path() *WatcherPathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockWatcher)(nil).Path))
	return &WatcherPathCall{Call: call}
}

// WatcherPathCall wrap *gomock.Call
type WatcherPathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherPathCall) Return(arg0 string) *WatcherPathCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherPathCall) Do(f func() string) *WatcherPathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherPathCall) DoAndReturn(f func() string) *WatcherPathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pipelines mocks base method.
func (m *MockWatcher) Pipelines() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pipelines")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Pipelines indicates an expected call of Pipelines.
func (mr *MockWatcherMockRecorder) Pipelines() *WatcherPipelinesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pipelines", reflect.TypeOf((*MockWatcher)(nil).Pipelines))
	return &WatcherPipelinesCall{Call: call}
}

// WatcherPipelinesCall wrap *gomock.Call
type WatcherPipelinesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherPipelinesCall) Return(arg0 []string) *WatcherPipelinesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherPipelinesCall) Do(f func() []string) *WatcherPipelinesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherPipelinesCall) DoAndReturn(f func() []string) *WatcherPipelinesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RejectDuplicates mocks base method.
func (m *MockWatcher) RejectDuplicates() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectDuplicates")
	ret0, _ := ret[0].(bool)
	return ret0
}

// RejectDuplicates indicates an expected call of RejectDuplicates.
func (mr *MockWatcherMockRecorder) RejectDuplicates() *WatcherRejectDuplicatesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectDuplicates", reflect.TypeOf((*MockWatcher)(nil).RejectDuplicates))
	return &WatcherRejectDuplicatesCall{Call: call}
}

// WatcherRejectDuplicatesCall wrap *gomock.Call
type WatcherRejectDuplicatesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherRejectDuplicatesCall) Return(arg0 bool) *WatcherRejectDuplicatesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherRejectDuplicatesCall) Do(f func() bool) *WatcherRejectDuplicatesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherRejectDuplicatesCall) DoAndReturn(f func() bool) *WatcherRejectDuplicatesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RetentionPeriod mocks base method.
func (m *MockWatcher) RetentionPeriod() *time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetentionPeriod")
	ret0, _ := ret[0].(*time.Duration)
	return ret0
}

// RetentionPeriod indicates an expected call of RetentionPeriod.
func (mr *MockWatcherMockRecorder) RetentionPeriod() *WatcherRetentionPeriodCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetentionPeriod", reflect.TypeOf((*MockWatcher)(nil).RetentionPeriod))
	return &WatcherRetentionPeriodCall{Call: call}
}

// WatcherRetentionPeriodCall wrap *gomock.Call
type WatcherRetentionPeriodCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherRetentionPeriodCall) Return(arg0 *time.Duration) *WatcherRetentionPeriodCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherRetentionPeriodCall) Do(f func() *time.Duration) *WatcherRetentionPeriodCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherRetentionPeriodCall) DoAndReturn(f func() *time.Duration) *WatcherRetentionPeriodCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// String mocks base method.
func (m *MockWatcher) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockWatcherMockRecorder) String() *WatcherStringCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockWatcher)(nil).String))
	return &WatcherStringCall{Call: call}
}

// WatcherStringCall wrap *gomock.Call
type WatcherStringCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherStringCall) Return(arg0 string) *WatcherStringCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherStringCall) Do(f func() string) *WatcherStringCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherStringCall) DoAndReturn(f func() string) *WatcherStringCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StripTopLevelDir mocks base method.
func (m *MockWatcher) StripTopLevelDir() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StripTopLevelDir")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StripTopLevelDir indicates an expected call of StripTopLevelDir.
func (mr *MockWatcherMockRecorder) StripTopLevelDir() *WatcherStripTopLevelDirCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StripTopLevelDir", reflect.TypeOf((*MockWatcher)(nil).StripTopLevelDir))
	return &WatcherStripTopLevelDirCall{Call: call}
}

// WatcherStripTopLevelDirCall wrap *gomock.Call
type WatcherStripTopLevelDirCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherStripTopLevelDirCall) Return(arg0 bool) *WatcherStripTopLevelDirCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherStripTopLevelDirCall) Do(f func() bool) *WatcherStripTopLevelDirCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherStripTopLevelDirCall) DoAndReturn(f func() bool) *WatcherStripTopLevelDirCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TransferType mocks base method.
func (m *MockWatcher) TransferType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferType")
	ret0, _ := ret[0].(string)
	return ret0
}

// TransferType indicates an expected call of TransferType.
func (mr *MockWatcherMockRecorder) TransferType() *WatcherTransferTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferType", reflect.TypeOf((*MockWatcher)(nil).TransferType))
	return &WatcherTransferTypeCall{Call: call}
}

// WatcherTransferTypeCall wrap *gomock.Call
type WatcherTransferTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherTransferTypeCall) Return(arg0 string) *WatcherTransferTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherTransferTypeCall) Do(f func() string) *WatcherTransferTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherTransferTypeCall) DoAndReturn(f func() string) *WatcherTransferTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockWatcher) Watch(arg0 context.Context) (*watcher.BlobEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(*watcher.BlobEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockWatcherMockRecorder) Watch(arg0 interface{}) *WatcherWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockWatcher)(nil).Watch), arg0)
	return &WatcherWatchCall{Call: call}
}

// WatcherWatchCall wrap *gomock.Call
type WatcherWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *WatcherWatchCall) Return(arg0 *watcher.BlobEvent, arg1 error) *WatcherWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *WatcherWatchCall) Do(f func(context.Context) (*watcher.BlobEvent, error)) *WatcherWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *WatcherWatchCall) DoAndReturn(f func(context.Context) (*watcher.BlobEvent, error)) *WatcherWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
