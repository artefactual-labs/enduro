// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-labs/enduro/internal/watcher (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/watcher/fake/mock_watcher.go -package=fake github.com/artefactual-labs/enduro/internal/watcher Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	io "io"
	reflect "reflect"

	watcher "github.com/artefactual-labs/enduro/internal/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ByName mocks base method.
func (m *MockService) ByName(name string) (watcher.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByName", name)
	ret0, _ := ret[0].(watcher.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByName indicates an expected call of ByName.
func (mr *MockServiceMockRecorder) ByName(name any) *MockServiceByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByName", reflect.TypeOf((*MockService)(nil).ByName), name)
	return &MockServiceByNameCall{Call: call}
}

// MockServiceByNameCall wrap *gomock.Call
type MockServiceByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceByNameCall) Return(arg0 watcher.Watcher, arg1 error) *MockServiceByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceByNameCall) Do(f func(string) (watcher.Watcher, error)) *MockServiceByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceByNameCall) DoAndReturn(f func(string) (watcher.Watcher, error)) *MockServiceByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, watcherName, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, watcherName, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, watcherName, key any) *MockServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, watcherName, key)
	return &MockServiceDeleteCall{Call: call}
}

// MockServiceDeleteCall wrap *gomock.Call
type MockServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDeleteCall) Return(arg0 error) *MockServiceDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDeleteCall) Do(f func(context.Context, string, string) error) *MockServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDeleteCall) DoAndReturn(f func(context.Context, string, string) error) *MockServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Dispose mocks base method.
func (m *MockService) Dispose(ctx context.Context, watcherName, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispose", ctx, watcherName, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispose indicates an expected call of Dispose.
func (mr *MockServiceMockRecorder) Dispose(ctx, watcherName, key any) *MockServiceDisposeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockService)(nil).Dispose), ctx, watcherName, key)
	return &MockServiceDisposeCall{Call: call}
}

// MockServiceDisposeCall wrap *gomock.Call
type MockServiceDisposeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDisposeCall) Return(arg0 error) *MockServiceDisposeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDisposeCall) Do(f func(context.Context, string, string) error) *MockServiceDisposeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDisposeCall) DoAndReturn(f func(context.Context, string, string) error) *MockServiceDisposeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Download mocks base method.
func (m *MockService) Download(ctx context.Context, w io.Writer, watcherName, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, w, watcherName, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Download indicates an expected call of Download.
func (mr *MockServiceMockRecorder) Download(ctx, w, watcherName, key any) *MockServiceDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockService)(nil).Download), ctx, w, watcherName, key)
	return &MockServiceDownloadCall{Call: call}
}

// MockServiceDownloadCall wrap *gomock.Call
type MockServiceDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceDownloadCall) Return(arg0 error) *MockServiceDownloadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceDownloadCall) Do(f func(context.Context, io.Writer, string, string) error) *MockServiceDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceDownloadCall) DoAndReturn(f func(context.Context, io.Writer, string, string) error) *MockServiceDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watchers mocks base method.
func (m *MockService) Watchers() []watcher.Watcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watchers")
	ret0, _ := ret[0].([]watcher.Watcher)
	return ret0
}

// Watchers indicates an expected call of Watchers.
func (mr *MockServiceMockRecorder) Watchers() *MockServiceWatchersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watchers", reflect.TypeOf((*MockService)(nil).Watchers))
	return &MockServiceWatchersCall{Call: call}
}

// MockServiceWatchersCall wrap *gomock.Call
type MockServiceWatchersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceWatchersCall) Return(arg0 []watcher.Watcher) *MockServiceWatchersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceWatchersCall) Do(f func() []watcher.Watcher) *MockServiceWatchersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceWatchersCall) DoAndReturn(f func() []watcher.Watcher) *MockServiceWatchersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
