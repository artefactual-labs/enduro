// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-labs/enduro/internal/amclient (interfaces: TransferService)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"

	amclient "github.com/artefactual-labs/enduro/internal/amclient"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// Approve mocks base method.
func (m *MockTransferService) Approve(arg0 context.Context, arg1 *amclient.TransferApproveRequest) (*amclient.TransferApproveResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Approve", arg0, arg1)
	ret0, _ := ret[0].(*amclient.TransferApproveResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Approve indicates an expected call of Approve.
func (mr *MockTransferServiceMockRecorder) Approve(arg0, arg1 interface{}) *TransferServiceApproveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockTransferService)(nil).Approve), arg0, arg1)
	return &TransferServiceApproveCall{Call: call}
}

// TransferServiceApproveCall wrap *gomock.Call
type TransferServiceApproveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransferServiceApproveCall) Return(arg0 *amclient.TransferApproveResponse, arg1 *amclient.Response, arg2 error) *TransferServiceApproveCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransferServiceApproveCall) Do(f func(context.Context, *amclient.TransferApproveRequest) (*amclient.TransferApproveResponse, *amclient.Response, error)) *TransferServiceApproveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransferServiceApproveCall) DoAndReturn(f func(context.Context, *amclient.TransferApproveRequest) (*amclient.TransferApproveResponse, *amclient.Response, error)) *TransferServiceApproveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Hide mocks base method.
func (m *MockTransferService) Hide(arg0 context.Context, arg1 string) (*amclient.TransferHideResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hide", arg0, arg1)
	ret0, _ := ret[0].(*amclient.TransferHideResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Hide indicates an expected call of Hide.
func (mr *MockTransferServiceMockRecorder) Hide(arg0, arg1 interface{}) *TransferServiceHideCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hide", reflect.TypeOf((*MockTransferService)(nil).Hide), arg0, arg1)
	return &TransferServiceHideCall{Call: call}
}

// TransferServiceHideCall wrap *gomock.Call
type TransferServiceHideCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransferServiceHideCall) Return(arg0 *amclient.TransferHideResponse, arg1 *amclient.Response, arg2 error) *TransferServiceHideCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransferServiceHideCall) Do(f func(context.Context, string) (*amclient.TransferHideResponse, *amclient.Response, error)) *TransferServiceHideCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransferServiceHideCall) DoAndReturn(f func(context.Context, string) (*amclient.TransferHideResponse, *amclient.Response, error)) *TransferServiceHideCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockTransferService) Start(arg0 context.Context, arg1 *amclient.TransferStartRequest) (*amclient.TransferStartResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(*amclient.TransferStartResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Start indicates an expected call of Start.
func (mr *MockTransferServiceMockRecorder) Start(arg0, arg1 interface{}) *TransferServiceStartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTransferService)(nil).Start), arg0, arg1)
	return &TransferServiceStartCall{Call: call}
}

// TransferServiceStartCall wrap *gomock.Call
type TransferServiceStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransferServiceStartCall) Return(arg0 *amclient.TransferStartResponse, arg1 *amclient.Response, arg2 error) *TransferServiceStartCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransferServiceStartCall) Do(f func(context.Context, *amclient.TransferStartRequest) (*amclient.TransferStartResponse, *amclient.Response, error)) *TransferServiceStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransferServiceStartCall) DoAndReturn(f func(context.Context, *amclient.TransferStartRequest) (*amclient.TransferStartResponse, *amclient.Response, error)) *TransferServiceStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockTransferService) Status(arg0 context.Context, arg1 string) (*amclient.TransferStatusResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", arg0, arg1)
	ret0, _ := ret[0].(*amclient.TransferStatusResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Status indicates an expected call of Status.
func (mr *MockTransferServiceMockRecorder) Status(arg0, arg1 interface{}) *TransferServiceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTransferService)(nil).Status), arg0, arg1)
	return &TransferServiceStatusCall{Call: call}
}

// TransferServiceStatusCall wrap *gomock.Call
type TransferServiceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransferServiceStatusCall) Return(arg0 *amclient.TransferStatusResponse, arg1 *amclient.Response, arg2 error) *TransferServiceStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransferServiceStatusCall) Do(f func(context.Context, string) (*amclient.TransferStatusResponse, *amclient.Response, error)) *TransferServiceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransferServiceStatusCall) DoAndReturn(f func(context.Context, string) (*amclient.TransferStatusResponse, *amclient.Response, error)) *TransferServiceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unapproved mocks base method.
func (m *MockTransferService) Unapproved(arg0 context.Context, arg1 *amclient.TransferUnapprovedRequest) (*amclient.TransferUnapprovedResponse, *amclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unapproved", arg0, arg1)
	ret0, _ := ret[0].(*amclient.TransferUnapprovedResponse)
	ret1, _ := ret[1].(*amclient.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Unapproved indicates an expected call of Unapproved.
func (mr *MockTransferServiceMockRecorder) Unapproved(arg0, arg1 interface{}) *TransferServiceUnapprovedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unapproved", reflect.TypeOf((*MockTransferService)(nil).Unapproved), arg0, arg1)
	return &TransferServiceUnapprovedCall{Call: call}
}

// TransferServiceUnapprovedCall wrap *gomock.Call
type TransferServiceUnapprovedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransferServiceUnapprovedCall) Return(arg0 *amclient.TransferUnapprovedResponse, arg1 *amclient.Response, arg2 error) *TransferServiceUnapprovedCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransferServiceUnapprovedCall) Do(f func(context.Context, *amclient.TransferUnapprovedRequest) (*amclient.TransferUnapprovedResponse, *amclient.Response, error)) *TransferServiceUnapprovedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransferServiceUnapprovedCall) DoAndReturn(f func(context.Context, *amclient.TransferUnapprovedRequest) (*amclient.TransferUnapprovedResponse, *amclient.Response, error)) *TransferServiceUnapprovedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
