// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-labs/enduro/internal/collection (interfaces: Service)

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	collection "github.com/artefactual-labs/enduro/internal/api/gen/collection"
	collection0 "github.com/artefactual-labs/enduro/internal/collection"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckDuplicate mocks base method.
func (m *MockService) CheckDuplicate(arg0 context.Context, arg1 uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicate", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicate indicates an expected call of CheckDuplicate.
func (mr *MockServiceMockRecorder) CheckDuplicate(arg0, arg1 interface{}) *ServiceCheckDuplicateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicate", reflect.TypeOf((*MockService)(nil).CheckDuplicate), arg0, arg1)
	return &ServiceCheckDuplicateCall{Call: call}
}

// ServiceCheckDuplicateCall wrap *gomock.Call
type ServiceCheckDuplicateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCheckDuplicateCall) Return(arg0 bool, arg1 error) *ServiceCheckDuplicateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCheckDuplicateCall) Do(f func(context.Context, uint) (bool, error)) *ServiceCheckDuplicateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCheckDuplicateCall) DoAndReturn(f func(context.Context, uint) (bool, error)) *ServiceCheckDuplicateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockService) Create(arg0 context.Context, arg1 *collection0.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0, arg1 interface{}) *ServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
	return &ServiceCreateCall{Call: call}
}

// ServiceCreateCall wrap *gomock.Call
type ServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceCreateCall) Return(arg0 error) *ServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceCreateCall) Do(f func(context.Context, *collection0.Collection) error) *ServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceCreateCall) DoAndReturn(f func(context.Context, *collection0.Collection) error) *ServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Goa mocks base method.
func (m *MockService) Goa() collection.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Goa")
	ret0, _ := ret[0].(collection.Service)
	return ret0
}

// Goa indicates an expected call of Goa.
func (mr *MockServiceMockRecorder) Goa() *ServiceGoaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Goa", reflect.TypeOf((*MockService)(nil).Goa))
	return &ServiceGoaCall{Call: call}
}

// ServiceGoaCall wrap *gomock.Call
type ServiceGoaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceGoaCall) Return(arg0 collection.Service) *ServiceGoaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceGoaCall) Do(f func() collection.Service) *ServiceGoaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceGoaCall) DoAndReturn(f func() collection.Service) *ServiceGoaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOriginalID mocks base method.
func (m *MockService) SetOriginalID(arg0 context.Context, arg1 uint, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOriginalID", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOriginalID indicates an expected call of SetOriginalID.
func (mr *MockServiceMockRecorder) SetOriginalID(arg0, arg1, arg2 interface{}) *ServiceSetOriginalIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOriginalID", reflect.TypeOf((*MockService)(nil).SetOriginalID), arg0, arg1, arg2)
	return &ServiceSetOriginalIDCall{Call: call}
}

// ServiceSetOriginalIDCall wrap *gomock.Call
type ServiceSetOriginalIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetOriginalIDCall) Return(arg0 error) *ServiceSetOriginalIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetOriginalIDCall) Do(f func(context.Context, uint, string) error) *ServiceSetOriginalIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetOriginalIDCall) DoAndReturn(f func(context.Context, uint, string) error) *ServiceSetOriginalIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockService) SetStatus(arg0 context.Context, arg1 uint, arg2 collection0.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockServiceMockRecorder) SetStatus(arg0, arg1, arg2 interface{}) *ServiceSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockService)(nil).SetStatus), arg0, arg1, arg2)
	return &ServiceSetStatusCall{Call: call}
}

// ServiceSetStatusCall wrap *gomock.Call
type ServiceSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetStatusCall) Return(arg0 error) *ServiceSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetStatusCall) Do(f func(context.Context, uint, collection0.Status) error) *ServiceSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetStatusCall) DoAndReturn(f func(context.Context, uint, collection0.Status) error) *ServiceSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusInProgress mocks base method.
func (m *MockService) SetStatusInProgress(arg0 context.Context, arg1 uint, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusInProgress", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusInProgress indicates an expected call of SetStatusInProgress.
func (mr *MockServiceMockRecorder) SetStatusInProgress(arg0, arg1, arg2 interface{}) *ServiceSetStatusInProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusInProgress", reflect.TypeOf((*MockService)(nil).SetStatusInProgress), arg0, arg1, arg2)
	return &ServiceSetStatusInProgressCall{Call: call}
}

// ServiceSetStatusInProgressCall wrap *gomock.Call
type ServiceSetStatusInProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetStatusInProgressCall) Return(arg0 error) *ServiceSetStatusInProgressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetStatusInProgressCall) Do(f func(context.Context, uint, time.Time) error) *ServiceSetStatusInProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetStatusInProgressCall) DoAndReturn(f func(context.Context, uint, time.Time) error) *ServiceSetStatusInProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusPending mocks base method.
func (m *MockService) SetStatusPending(arg0 context.Context, arg1 uint, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusPending", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusPending indicates an expected call of SetStatusPending.
func (mr *MockServiceMockRecorder) SetStatusPending(arg0, arg1, arg2 interface{}) *ServiceSetStatusPendingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPending", reflect.TypeOf((*MockService)(nil).SetStatusPending), arg0, arg1, arg2)
	return &ServiceSetStatusPendingCall{Call: call}
}

// ServiceSetStatusPendingCall wrap *gomock.Call
type ServiceSetStatusPendingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceSetStatusPendingCall) Return(arg0 error) *ServiceSetStatusPendingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceSetStatusPendingCall) Do(f func(context.Context, uint, []byte) error) *ServiceSetStatusPendingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceSetStatusPendingCall) DoAndReturn(f func(context.Context, uint, []byte) error) *ServiceSetStatusPendingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWorkflowStatus mocks base method.
func (m *MockService) UpdateWorkflowStatus(arg0 context.Context, arg1 uint, arg2, arg3, arg4, arg5, arg6, arg7 string, arg8 collection0.Status, arg9 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStatus", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowStatus indicates an expected call of UpdateWorkflowStatus.
func (mr *MockServiceMockRecorder) UpdateWorkflowStatus(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 interface{}) *ServiceUpdateWorkflowStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStatus", reflect.TypeOf((*MockService)(nil).UpdateWorkflowStatus), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
	return &ServiceUpdateWorkflowStatusCall{Call: call}
}

// ServiceUpdateWorkflowStatusCall wrap *gomock.Call
type ServiceUpdateWorkflowStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ServiceUpdateWorkflowStatusCall) Return(arg0 error) *ServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ServiceUpdateWorkflowStatusCall) Do(f func(context.Context, uint, string, string, string, string, string, string, collection0.Status, time.Time) error) *ServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ServiceUpdateWorkflowStatusCall) DoAndReturn(f func(context.Context, uint, string, string, string, string, string, string, collection0.Status, time.Time) error) *ServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
