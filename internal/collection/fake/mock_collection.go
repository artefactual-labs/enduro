// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/artefactual-labs/enduro/internal/collection (interfaces: Service)
//
// Generated by this command:
//
//	mockgen -typed -destination=./internal/collection/fake/mock_collection.go -package=fake github.com/artefactual-labs/enduro/internal/collection Service
//

// Package fake is a generated GoMock package.
package fake

import (
	context "context"
	reflect "reflect"
	time "time"

	collection "github.com/artefactual-labs/enduro/internal/api/gen/collection"
	collection0 "github.com/artefactual-labs/enduro/internal/collection"
	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CheckDuplicate mocks base method.
func (m *MockService) CheckDuplicate(ctx context.Context, id uint) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDuplicate", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDuplicate indicates an expected call of CheckDuplicate.
func (mr *MockServiceMockRecorder) CheckDuplicate(ctx, id any) *MockServiceCheckDuplicateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDuplicate", reflect.TypeOf((*MockService)(nil).CheckDuplicate), ctx, id)
	return &MockServiceCheckDuplicateCall{Call: call}
}

// MockServiceCheckDuplicateCall wrap *gomock.Call
type MockServiceCheckDuplicateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCheckDuplicateCall) Return(arg0 bool, arg1 error) *MockServiceCheckDuplicateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCheckDuplicateCall) Do(f func(context.Context, uint) (bool, error)) *MockServiceCheckDuplicateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCheckDuplicateCall) DoAndReturn(f func(context.Context, uint) (bool, error)) *MockServiceCheckDuplicateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockService) Create(arg0 context.Context, arg1 *collection0.Collection) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0, arg1 any) *MockServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1)
	return &MockServiceCreateCall{Call: call}
}

// MockServiceCreateCall wrap *gomock.Call
type MockServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceCreateCall) Return(arg0 error) *MockServiceCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceCreateCall) Do(f func(context.Context, *collection0.Collection) error) *MockServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceCreateCall) DoAndReturn(f func(context.Context, *collection0.Collection) error) *MockServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Goa mocks base method.
func (m *MockService) Goa() collection.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Goa")
	ret0, _ := ret[0].(collection.Service)
	return ret0
}

// Goa indicates an expected call of Goa.
func (mr *MockServiceMockRecorder) Goa() *MockServiceGoaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Goa", reflect.TypeOf((*MockService)(nil).Goa))
	return &MockServiceGoaCall{Call: call}
}

// MockServiceGoaCall wrap *gomock.Call
type MockServiceGoaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceGoaCall) Return(arg0 collection.Service) *MockServiceGoaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceGoaCall) Do(f func() collection.Service) *MockServiceGoaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceGoaCall) DoAndReturn(f func() collection.Service) *MockServiceGoaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetOriginalID mocks base method.
func (m *MockService) SetOriginalID(ctx context.Context, ID uint, originalID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetOriginalID", ctx, ID, originalID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetOriginalID indicates an expected call of SetOriginalID.
func (mr *MockServiceMockRecorder) SetOriginalID(ctx, ID, originalID any) *MockServiceSetOriginalIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOriginalID", reflect.TypeOf((*MockService)(nil).SetOriginalID), ctx, ID, originalID)
	return &MockServiceSetOriginalIDCall{Call: call}
}

// MockServiceSetOriginalIDCall wrap *gomock.Call
type MockServiceSetOriginalIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetOriginalIDCall) Return(arg0 error) *MockServiceSetOriginalIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetOriginalIDCall) Do(f func(context.Context, uint, string) error) *MockServiceSetOriginalIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetOriginalIDCall) DoAndReturn(f func(context.Context, uint, string) error) *MockServiceSetOriginalIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockService) SetStatus(ctx context.Context, ID uint, status collection0.Status) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", ctx, ID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockServiceMockRecorder) SetStatus(ctx, ID, status any) *MockServiceSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockService)(nil).SetStatus), ctx, ID, status)
	return &MockServiceSetStatusCall{Call: call}
}

// MockServiceSetStatusCall wrap *gomock.Call
type MockServiceSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetStatusCall) Return(arg0 error) *MockServiceSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetStatusCall) Do(f func(context.Context, uint, collection0.Status) error) *MockServiceSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetStatusCall) DoAndReturn(f func(context.Context, uint, collection0.Status) error) *MockServiceSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusInProgress mocks base method.
func (m *MockService) SetStatusInProgress(ctx context.Context, ID uint, startedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusInProgress", ctx, ID, startedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusInProgress indicates an expected call of SetStatusInProgress.
func (mr *MockServiceMockRecorder) SetStatusInProgress(ctx, ID, startedAt any) *MockServiceSetStatusInProgressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusInProgress", reflect.TypeOf((*MockService)(nil).SetStatusInProgress), ctx, ID, startedAt)
	return &MockServiceSetStatusInProgressCall{Call: call}
}

// MockServiceSetStatusInProgressCall wrap *gomock.Call
type MockServiceSetStatusInProgressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetStatusInProgressCall) Return(arg0 error) *MockServiceSetStatusInProgressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetStatusInProgressCall) Do(f func(context.Context, uint, time.Time) error) *MockServiceSetStatusInProgressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetStatusInProgressCall) DoAndReturn(f func(context.Context, uint, time.Time) error) *MockServiceSetStatusInProgressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatusPending mocks base method.
func (m *MockService) SetStatusPending(ctx context.Context, ID uint, taskToken []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatusPending", ctx, ID, taskToken)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatusPending indicates an expected call of SetStatusPending.
func (mr *MockServiceMockRecorder) SetStatusPending(ctx, ID, taskToken any) *MockServiceSetStatusPendingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatusPending", reflect.TypeOf((*MockService)(nil).SetStatusPending), ctx, ID, taskToken)
	return &MockServiceSetStatusPendingCall{Call: call}
}

// MockServiceSetStatusPendingCall wrap *gomock.Call
type MockServiceSetStatusPendingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceSetStatusPendingCall) Return(arg0 error) *MockServiceSetStatusPendingCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceSetStatusPendingCall) Do(f func(context.Context, uint, []byte) error) *MockServiceSetStatusPendingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceSetStatusPendingCall) DoAndReturn(f func(context.Context, uint, []byte) error) *MockServiceSetStatusPendingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateWorkflowStatus mocks base method.
func (m *MockService) UpdateWorkflowStatus(ctx context.Context, ID uint, name, workflowID, runID, transferID, aipID, pipelineID string, status collection0.Status, storedAt time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkflowStatus", ctx, ID, name, workflowID, runID, transferID, aipID, pipelineID, status, storedAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkflowStatus indicates an expected call of UpdateWorkflowStatus.
func (mr *MockServiceMockRecorder) UpdateWorkflowStatus(ctx, ID, name, workflowID, runID, transferID, aipID, pipelineID, status, storedAt any) *MockServiceUpdateWorkflowStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkflowStatus", reflect.TypeOf((*MockService)(nil).UpdateWorkflowStatus), ctx, ID, name, workflowID, runID, transferID, aipID, pipelineID, status, storedAt)
	return &MockServiceUpdateWorkflowStatusCall{Call: call}
}

// MockServiceUpdateWorkflowStatusCall wrap *gomock.Call
type MockServiceUpdateWorkflowStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockServiceUpdateWorkflowStatusCall) Return(arg0 error) *MockServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockServiceUpdateWorkflowStatusCall) Do(f func(context.Context, uint, string, string, string, string, string, string, collection0.Status, time.Time) error) *MockServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockServiceUpdateWorkflowStatusCall) DoAndReturn(f func(context.Context, uint, string, string, string, string, string, string, collection0.Status, time.Time) error) *MockServiceUpdateWorkflowStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
