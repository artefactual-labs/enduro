// Code generated by goa v3.0.10, DO NOT EDIT.
//
// pipeline HTTP server types
//
// Command:
// $ goa gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package server

import (
	pipeline "github.com/artefactual-labs/enduro/internal/api/gen/pipeline"
	pipelineviews "github.com/artefactual-labs/enduro/internal/api/gen/pipeline/views"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "pipeline" service "list" endpoint HTTP
// response body.
type ListResponseBody []*EnduroStoredPipelineResponse

// ShowResponseBody is the type of the "pipeline" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// Name of the collection
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the collection
	Name string `form:"name" json:"name" xml:"name"`
}

// ShowNotFoundResponseBody is the type of the "pipeline" service "show"
// endpoint HTTP response body for the "not_found" error.
type ShowNotFoundResponseBody struct {
	// Message of error
	Message string `form:"message" json:"message" xml:"message"`
	// Identifier of missing collection
	ID uint `form:"id" json:"id" xml:"id"`
}

// EnduroStoredPipelineResponse is used to define fields on response body types.
type EnduroStoredPipelineResponse struct {
	// Name of the collection
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the collection
	Name string `form:"name" json:"name" xml:"name"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "pipeline" service.
func NewListResponseBody(res []*pipeline.EnduroStoredPipeline) ListResponseBody {
	body := make([]*EnduroStoredPipelineResponse, len(res))
	for i, val := range res {
		body[i] = &EnduroStoredPipelineResponse{
			ID:   val.ID,
			Name: val.Name,
		}
	}
	return body
}

// NewShowResponseBody builds the HTTP response body from the result of the
// "show" endpoint of the "pipeline" service.
func NewShowResponseBody(res *pipelineviews.EnduroStoredPipelineView) *ShowResponseBody {
	body := &ShowResponseBody{
		ID:   res.ID,
		Name: *res.Name,
	}
	return body
}

// NewShowNotFoundResponseBody builds the HTTP response body from the result of
// the "show" endpoint of the "pipeline" service.
func NewShowNotFoundResponseBody(res *pipeline.NotFound) *ShowNotFoundResponseBody {
	body := &ShowNotFoundResponseBody{
		Message: res.Message,
		ID:      res.ID,
	}
	return body
}

// NewListPayload builds a pipeline service list endpoint payload.
func NewListPayload(name *string) *pipeline.ListPayload {
	return &pipeline.ListPayload{
		Name: name,
	}
}

// NewShowPayload builds a pipeline service show endpoint payload.
func NewShowPayload(id string) *pipeline.ShowPayload {
	return &pipeline.ShowPayload{
		ID: id,
	}
}

// ValidateEnduroStoredPipelineResponse runs the validations defined on
// EnduroStored-PipelineResponse
func ValidateEnduroStoredPipelineResponse(body *EnduroStoredPipelineResponse) (err error) {
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	return
}
