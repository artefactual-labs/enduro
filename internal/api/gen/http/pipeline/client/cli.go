// Code generated by goa v3.11.3, DO NOT EDIT.
//
// pipeline HTTP client CLI support package
//
// Command:
// $ goa gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package client

import (
	"fmt"
	"strconv"

	pipeline "github.com/artefactual-labs/enduro/internal/api/gen/pipeline"
	goa "goa.design/goa/v3/pkg"
)

// BuildListPayload builds the payload for the pipeline list endpoint from CLI
// flags.
func BuildListPayload(pipelineListName string, pipelineListStatus string) (*pipeline.ListPayload, error) {
	var err error
	var name *string
	{
		if pipelineListName != "" {
			name = &pipelineListName
		}
	}
	var status bool
	{
		if pipelineListStatus != "" {
			status, err = strconv.ParseBool(pipelineListStatus)
			if err != nil {
				return nil, fmt.Errorf("invalid value for status, must be BOOL")
			}
		}
	}
	v := &pipeline.ListPayload{}
	v.Name = name
	v.Status = status

	return v, nil
}

// BuildShowPayload builds the payload for the pipeline show endpoint from CLI
// flags.
func BuildShowPayload(pipelineShowID string) (*pipeline.ShowPayload, error) {
	var err error
	var id string
	{
		id = pipelineShowID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &pipeline.ShowPayload{}
	v.ID = id

	return v, nil
}

// BuildProcessingPayload builds the payload for the pipeline processing
// endpoint from CLI flags.
func BuildProcessingPayload(pipelineProcessingID string) (*pipeline.ProcessingPayload, error) {
	var err error
	var id string
	{
		id = pipelineProcessingID
		err = goa.MergeErrors(err, goa.ValidateFormat("id", id, goa.FormatUUID))
		if err != nil {
			return nil, err
		}
	}
	v := &pipeline.ProcessingPayload{}
	v.ID = id

	return v, nil
}
