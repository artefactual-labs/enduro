// Code generated by goa v3.0.9, DO NOT EDIT.
//
// collection service
//
// Command:
// $ goa gen github.com/artefactual-labs/enduro/internal/api/design -o
// internal/api

package collection

import (
	"context"

	collectionviews "github.com/artefactual-labs/enduro/internal/api/gen/collection/views"
	goa "goa.design/goa/v3/pkg"
)

// The collection service manages packages being transferred to Archivematica.
type Service interface {
	// List all stored collections
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// Show collection by ID
	Show(context.Context, *ShowPayload) (res *EnduroStoredCollection, err error)
	// Delete collection by ID
	Delete(context.Context, *DeletePayload) (err error)
	// Cancel collection processing by ID
	Cancel(context.Context, *CancelPayload) (err error)
	// Retry collection processing by ID
	Retry(context.Context, *RetryPayload) (err error)
	// Retrieve workflow status by ID
	Workflow(context.Context, *WorkflowPayload) (res *EnduroCollectionWorkflowStatus, err error)
	// Download collection by ID
	Download(context.Context, *DownloadPayload) (res []byte, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "collection"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [7]string{"list", "show", "delete", "cancel", "retry", "workflow", "download"}

// ListPayload is the payload type of the collection service list method.
type ListPayload struct {
	Name                *string
	OriginalID          *string
	TransferID          *string
	AipID               *string
	PipelineID          *string
	EarliestCreatedTime *string
	LatestCreatedTime   *string
	Status              *string
	// Pagination cursor
	Cursor *string
}

// ListResult is the result type of the collection service list method.
type ListResult struct {
	Items      EnduroStoredCollectionCollection
	NextCursor *string
}

// ShowPayload is the payload type of the collection service show method.
type ShowPayload struct {
	// Identifier of collection to show
	ID uint
}

// EnduroStoredCollection is the result type of the collection service show
// method.
type EnduroStoredCollection struct {
	// Identifier of collection
	ID uint
	// Name of the collection
	Name *string
	// Status of the collection
	Status string
	// Identifier of processing workflow
	WorkflowID *string
	// Identifier of latest processing workflow run
	RunID *string
	// Identifier of Archivematica transfer
	TransferID *string
	// Identifier of Archivematica AIP
	AipID *string
	// Identifier provided by the client
	OriginalID *string
	// Identifier of Archivematica pipeline
	PipelineID *string
	// Creation datetime
	CreatedAt string
	// Completion datetime
	CompletedAt *string
}

// DeletePayload is the payload type of the collection service delete method.
type DeletePayload struct {
	// Identifier of collection to delete
	ID uint
}

// CancelPayload is the payload type of the collection service cancel method.
type CancelPayload struct {
	// Identifier of collection to remove
	ID uint
}

// RetryPayload is the payload type of the collection service retry method.
type RetryPayload struct {
	// Identifier of collection to retry
	ID uint
}

// WorkflowPayload is the payload type of the collection service workflow
// method.
type WorkflowPayload struct {
	// Identifier of collection to look up
	ID uint
}

// EnduroCollectionWorkflowStatus is the result type of the collection service
// workflow method.
type EnduroCollectionWorkflowStatus struct {
	Status  *string
	History EnduroCollectionWorkflowHistoryCollection
}

// DownloadPayload is the payload type of the collection service download
// method.
type DownloadPayload struct {
	// Identifier of collection to look up
	ID uint
}

type EnduroStoredCollectionCollection []*EnduroStoredCollection

type EnduroCollectionWorkflowHistoryCollection []*EnduroCollectionWorkflowHistory

// WorkflowHistoryEvent describes a history event in Cadence.
type EnduroCollectionWorkflowHistory struct {
	// Identifier of collection
	ID *uint
	// Type of the event
	Type *string
	// Contents of the event
	Details interface{}
}

// NotFound is the type returned when attempting to operate with a collection
// that does not exist.
type NotFound struct {
	// Message of error
	Message string
	// Identifier of missing collection
	ID uint
}

// Error returns an error description.
func (e *NotFound) Error() string {
	return "NotFound is the type returned when attempting to operate with a collection that does not exist."
}

// ErrorName returns "NotFound".
func (e *NotFound) ErrorName() string {
	return e.Message
}

// MakeNotRunning builds a goa.ServiceError from an error.
func MakeNotRunning(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "not_running",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewEnduroStoredCollection initializes result type EnduroStoredCollection
// from viewed result type EnduroStoredCollection.
func NewEnduroStoredCollection(vres *collectionviews.EnduroStoredCollection) *EnduroStoredCollection {
	var res *EnduroStoredCollection
	switch vres.View {
	case "default", "":
		res = newEnduroStoredCollection(vres.Projected)
	}
	return res
}

// NewViewedEnduroStoredCollection initializes viewed result type
// EnduroStoredCollection from result type EnduroStoredCollection using the
// given view.
func NewViewedEnduroStoredCollection(res *EnduroStoredCollection, view string) *collectionviews.EnduroStoredCollection {
	var vres *collectionviews.EnduroStoredCollection
	switch view {
	case "default", "":
		p := newEnduroStoredCollectionView(res)
		vres = &collectionviews.EnduroStoredCollection{Projected: p, View: "default"}
	}
	return vres
}

// NewEnduroCollectionWorkflowStatus initializes result type
// EnduroCollectionWorkflowStatus from viewed result type
// EnduroCollectionWorkflowStatus.
func NewEnduroCollectionWorkflowStatus(vres *collectionviews.EnduroCollectionWorkflowStatus) *EnduroCollectionWorkflowStatus {
	var res *EnduroCollectionWorkflowStatus
	switch vres.View {
	case "default", "":
		res = newEnduroCollectionWorkflowStatus(vres.Projected)
	}
	return res
}

// NewViewedEnduroCollectionWorkflowStatus initializes viewed result type
// EnduroCollectionWorkflowStatus from result type
// EnduroCollectionWorkflowStatus using the given view.
func NewViewedEnduroCollectionWorkflowStatus(res *EnduroCollectionWorkflowStatus, view string) *collectionviews.EnduroCollectionWorkflowStatus {
	var vres *collectionviews.EnduroCollectionWorkflowStatus
	switch view {
	case "default", "":
		p := newEnduroCollectionWorkflowStatusView(res)
		vres = &collectionviews.EnduroCollectionWorkflowStatus{Projected: p, View: "default"}
	}
	return vres
}

// newEnduroStoredCollection converts projected type EnduroStoredCollection to
// service type EnduroStoredCollection.
func newEnduroStoredCollection(vres *collectionviews.EnduroStoredCollectionView) *EnduroStoredCollection {
	res := &EnduroStoredCollection{
		Name:        vres.Name,
		WorkflowID:  vres.WorkflowID,
		RunID:       vres.RunID,
		TransferID:  vres.TransferID,
		AipID:       vres.AipID,
		OriginalID:  vres.OriginalID,
		PipelineID:  vres.PipelineID,
		CompletedAt: vres.CompletedAt,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Status != nil {
		res.Status = *vres.Status
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.Status == nil {
		res.Status = "new"
	}
	return res
}

// newEnduroStoredCollectionView projects result type EnduroStoredCollection to
// projected type EnduroStoredCollectionView using the "default" view.
func newEnduroStoredCollectionView(res *EnduroStoredCollection) *collectionviews.EnduroStoredCollectionView {
	vres := &collectionviews.EnduroStoredCollectionView{
		ID:          &res.ID,
		Name:        res.Name,
		Status:      &res.Status,
		WorkflowID:  res.WorkflowID,
		RunID:       res.RunID,
		TransferID:  res.TransferID,
		AipID:       res.AipID,
		OriginalID:  res.OriginalID,
		PipelineID:  res.PipelineID,
		CreatedAt:   &res.CreatedAt,
		CompletedAt: res.CompletedAt,
	}
	return vres
}

// newEnduroCollectionWorkflowStatus converts projected type
// EnduroCollectionWorkflowStatus to service type
// EnduroCollectionWorkflowStatus.
func newEnduroCollectionWorkflowStatus(vres *collectionviews.EnduroCollectionWorkflowStatusView) *EnduroCollectionWorkflowStatus {
	res := &EnduroCollectionWorkflowStatus{
		Status: vres.Status,
	}
	if vres.History != nil {
		res.History = newEnduroCollectionWorkflowHistoryCollection(vres.History)
	}
	return res
}

// newEnduroCollectionWorkflowStatusView projects result type
// EnduroCollectionWorkflowStatus to projected type
// EnduroCollectionWorkflowStatusView using the "default" view.
func newEnduroCollectionWorkflowStatusView(res *EnduroCollectionWorkflowStatus) *collectionviews.EnduroCollectionWorkflowStatusView {
	vres := &collectionviews.EnduroCollectionWorkflowStatusView{
		Status: res.Status,
	}
	if res.History != nil {
		vres.History = newEnduroCollectionWorkflowHistoryCollectionView(res.History)
	}
	return vres
}

// newEnduroCollectionWorkflowHistoryCollection converts projected type
// EnduroCollectionWorkflowHistoryCollection to service type
// EnduroCollectionWorkflowHistoryCollection.
func newEnduroCollectionWorkflowHistoryCollection(vres collectionviews.EnduroCollectionWorkflowHistoryCollectionView) EnduroCollectionWorkflowHistoryCollection {
	res := make(EnduroCollectionWorkflowHistoryCollection, len(vres))
	for i, n := range vres {
		res[i] = newEnduroCollectionWorkflowHistory(n)
	}
	return res
}

// newEnduroCollectionWorkflowHistoryCollectionView projects result type
// EnduroCollectionWorkflowHistoryCollection to projected type
// EnduroCollectionWorkflowHistoryCollectionView using the "default" view.
func newEnduroCollectionWorkflowHistoryCollectionView(res EnduroCollectionWorkflowHistoryCollection) collectionviews.EnduroCollectionWorkflowHistoryCollectionView {
	vres := make(collectionviews.EnduroCollectionWorkflowHistoryCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEnduroCollectionWorkflowHistoryView(n)
	}
	return vres
}

// newEnduroCollectionWorkflowHistory converts projected type
// EnduroCollectionWorkflowHistory to service type
// EnduroCollectionWorkflowHistory.
func newEnduroCollectionWorkflowHistory(vres *collectionviews.EnduroCollectionWorkflowHistoryView) *EnduroCollectionWorkflowHistory {
	res := &EnduroCollectionWorkflowHistory{
		ID:      vres.ID,
		Type:    vres.Type,
		Details: vres.Details,
	}
	return res
}

// newEnduroCollectionWorkflowHistoryView projects result type
// EnduroCollectionWorkflowHistory to projected type
// EnduroCollectionWorkflowHistoryView using the "default" view.
func newEnduroCollectionWorkflowHistoryView(res *EnduroCollectionWorkflowHistory) *collectionviews.EnduroCollectionWorkflowHistoryView {
	vres := &collectionviews.EnduroCollectionWorkflowHistoryView{
		ID:      res.ID,
		Type:    res.Type,
		Details: res.Details,
	}
	return vres
}
