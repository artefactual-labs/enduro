/* tslint:disable */
/* eslint-disable */
/**
 * Enduro API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BatchHintsResponseBody,
    BatchHintsResponseBodyFromJSON,
    BatchHintsResponseBodyToJSON,
    BatchStatusResponseBody,
    BatchStatusResponseBodyFromJSON,
    BatchStatusResponseBodyToJSON,
    BatchSubmitNotAvailableResponseBody,
    BatchSubmitNotAvailableResponseBodyFromJSON,
    BatchSubmitNotAvailableResponseBodyToJSON,
    BatchSubmitNotValidResponseBody,
    BatchSubmitNotValidResponseBodyFromJSON,
    BatchSubmitNotValidResponseBodyToJSON,
    BatchSubmitRequestBody,
    BatchSubmitRequestBodyFromJSON,
    BatchSubmitRequestBodyToJSON,
    BatchSubmitResponseBody,
    BatchSubmitResponseBodyFromJSON,
    BatchSubmitResponseBodyToJSON,
} from '../models';

export interface BatchSubmitRequest {
    submitRequestBody: BatchSubmitRequestBody;
}

/**
 * BatchApi - interface
 * 
 * @export
 * @interface BatchApiInterface
 */
export interface BatchApiInterface {
    /**
     * Retrieve form hints
     * @summary hints batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    batchHintsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BatchHintsResponseBody>>;

    /**
     * Retrieve form hints
     * hints batch
     */
    batchHints(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BatchHintsResponseBody>;

    /**
     * Retrieve status of current batch operation.
     * @summary status batch
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    batchStatusRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BatchStatusResponseBody>>;

    /**
     * Retrieve status of current batch operation.
     * status batch
     */
    batchStatus(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BatchStatusResponseBody>;

    /**
     * Submit a new batch
     * @summary submit batch
     * @param {BatchSubmitRequestBody} submitRequestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BatchApiInterface
     */
    batchSubmitRaw(requestParameters: BatchSubmitRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BatchSubmitResponseBody>>;

    /**
     * Submit a new batch
     * submit batch
     */
    batchSubmit(requestParameters: BatchSubmitRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BatchSubmitResponseBody>;

}

/**
 * 
 */
export class BatchApi extends runtime.BaseAPI implements BatchApiInterface {

    /**
     * Retrieve form hints
     * hints batch
     */
    async batchHintsRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BatchHintsResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/batch/hints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchHintsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve form hints
     * hints batch
     */
    async batchHints(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BatchHintsResponseBody> {
        const response = await this.batchHintsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve status of current batch operation.
     * status batch
     */
    async batchStatusRaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BatchStatusResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/batch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchStatusResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve status of current batch operation.
     * status batch
     */
    async batchStatus(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BatchStatusResponseBody> {
        const response = await this.batchStatusRaw(initOverrides);
        return await response.value();
    }

    /**
     * Submit a new batch
     * submit batch
     */
    async batchSubmitRaw(requestParameters: BatchSubmitRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<BatchSubmitResponseBody>> {
        if (requestParameters.submitRequestBody === null || requestParameters.submitRequestBody === undefined) {
            throw new runtime.RequiredError('submitRequestBody','Required parameter requestParameters.submitRequestBody was null or undefined when calling batchSubmit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchSubmitRequestBodyToJSON(requestParameters.submitRequestBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchSubmitResponseBodyFromJSON(jsonValue));
    }

    /**
     * Submit a new batch
     * submit batch
     */
    async batchSubmit(requestParameters: BatchSubmitRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<BatchSubmitResponseBody> {
        const response = await this.batchSubmitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
